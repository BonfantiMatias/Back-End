package ar.com.argentinaprograma.apirest.auth;

import java.util.Arrays;

import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

@Configuration
@EnableResourceServer
public class ResourceServerConfig extends ResourceServerConfigurerAdapter {

	@Override
	public void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests().antMatchers(HttpMethod.GET, "/api/basicos","/api/skill/**","/api/basicos/1", "/api/uploads/img/**").permitAll()
		.antMatchers(HttpMethod.GET, "/api/basicos/{id}").hasAnyRole("USER", "ADMIN")
		.antMatchers(HttpMethod.GET, "/api/basicos/1").hasAnyRole("USER", "ADMIN")
		.antMatchers(HttpMethod.GET, "/api/skill/{id}").hasAnyRole("USER", "ADMIN")
		.antMatchers(HttpMethod.GET, "/api/skill/**").hasAnyRole("USER", "ADMIN")
		.antMatchers(HttpMethod.POST, "/api/basicos/upload").hasAnyRole("USER", "ADMIN")
		.antMatchers(HttpMethod.POST, "/api/basicos").hasRole("ADMIN")
		.antMatchers(HttpMethod.POST, "/api/skill").hasRole("ADMIN")
		.antMatchers("/api/basicos/1").hasRole("ADMIN")
		.antMatchers("/api/skill/**").hasRole("ADMIN")
		.antMatchers("/api/basicos/**").hasRole("ADMIN")
		.anyRequest().authenticated()
		.and().cors().configurationSource(corsConfigurationSource());
	}
	@Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("http://localhost:4200"));
        configuration.setAllowedMethods(Arrays.asList("GET","POST","PUT","DELETE","OPTIONS"));
        configuration.setAllowCredentials(true);
        configuration.setAllowedHeaders(Arrays.asList("Content-Type",  "Authorization"));
        
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
	
	@Bean
	public FilterRegistrationBean<CorsFilter> corsFilter(){
		FilterRegistrationBean<CorsFilter> bean = new FilterRegistrationBean<CorsFilter>(new CorsFilter(corsConfigurationSource()));
		bean.setOrder(Ordered.HIGHEST_PRECEDENCE);
		return bean;
	}
 
	
}
